[Client]

1. DateClient.java (GET, 날짜 요청)

import org.eclipse.jetty.client.HttpClient;

import org.eclipse.jetty.client.api.ContentResponse;

import org.eclipse.jetty.http.HttpMethod;

​

public class DateClient {

    public static void main(String[] args) throws Exception {

        HttpClient httpClient = new HttpClient();

        httpClient.start();

        ContentResponse contentRes = 

                httpClient.newRequest("http://127.0.0.1:8080/requestDate").method(HttpMethod.GET).send();

        System.out.println(contentRes.getContentAsString());

        httpClient.stop();

    }

}

​

2. FileClient.java (POST, 파일목록을 json파일로 전송)

import java.io.File;

import org.eclipse.jetty.client.HttpClient;

import org.eclipse.jetty.client.api.ContentResponse;

import org.eclipse.jetty.client.api.Request;

import org.eclipse.jetty.client.util.StringContentProvider;

import org.eclipse.jetty.http.HttpHeader;

import org.eclipse.jetty.http.HttpMethod;

import com.google.gson.Gson;

import com.google.gson.JsonArray;

import com.google.gson.JsonObject;

​

public class FileClient {

    public static void main(String[] args) throws Exception {

        String strFileList = getFileList();

​

        HttpClient httpClient = new HttpClient();

        httpClient.start();

        Request request = httpClient.newRequest("http://127.0.0.1:8080/fileList").method(HttpMethod.POST);

        request.header(HttpHeader.CONTENT_TYPE, "application/json");

        request.content(new StringContentProvider(strFileList,"utf-8"));

        ContentResponse contentRes = request.send();

        System.out.println(contentRes.getContentAsString());

        httpClient.stop();

    }

​

    private static String getFileList() {

        Gson gson = new Gson();

        JsonObject jo = new JsonObject();

        File directory = new File("./Input");

        jo.addProperty("Folder", "Input");

        JsonArray jarr = new JsonArray();

        File[] fList = directory.listFiles();

        for (File file : fList) {

            jarr.add(file.getName());

        } 

        jo.add("FILES", jarr);

​

        String res = jo.toString();

        return res; 

    }

}

​

3. BinaryFile1.java (GET, 바이너리 파일 전송 요청)

import java.io.ByteArrayInputStream;

import java.io.FileOutputStream;

import java.io.ObjectInputStream;

import java.util.Map;

​

import org.eclipse.jetty.client.HttpClient;

import org.eclipse.jetty.client.api.ContentResponse;

import org.eclipse.jetty.http.HttpMethod;

​

public class BinaryFile {

    public static void main(String[] args) throws Exception {

        HttpClient httpClient = new HttpClient();

        httpClient.start();

        ContentResponse contentRes = 

                httpClient.newRequest("http://127.0.0.1:8080/requestFile").method(HttpMethod.GET).send();

        byte [] myByteArray = contentRes.getContent();

​

        try (FileOutputStream fos = new FileOutputStream("C:\\temp\\test.jpg")) {

            fos.write(myByteArray);

        }

        httpClient.stop();

    }

}

​

4. BinaryFile2.java (GET, Serialize된 MAP을 받아 Key는 파일이름, Value는 파일내용으로 처리하여 저장)

public class BinaryFile2 {

    public static void main(String[] args) throws Exception {

        HttpClient httpClient = new HttpClient();

        httpClient.start();

        ContentResponse contentRes = 

            httpClient.newRequest("http://127.0.0.1:8080/requestFile2").method(HttpMethod.GET).send();

        byte [] myByteArray = contentRes.getContent();

​

        ByteArrayInputStream byteIn = new ByteArrayInputStream(myByteArray);

        ObjectInputStream in = new ObjectInputStream(byteIn);

        Map<String, byte[]> data2 = (Map<String, byte[]>) in.readObject();

​

        try (FileOutputStream fos = new FileOutputStream("C:\\temp\\test.jpg")) {

            fos.write(data2.get("file"));

        }

        httpClient.stop();

    }

}
